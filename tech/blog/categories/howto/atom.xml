<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: howto | the Ephemeral Me]]></title>
  <link href="http://ephemeral.me/blog/categories/howto/atom.xml" rel="self"/>
  <link href="http://ephemeral.me/"/>
  <updated>2016-08-16T10:31:03+00:00</updated>
  <id>http://ephemeral.me/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Option parsing in Python scripts]]></title>
    <link href="http://ephemeral.me/blog/2013/07/16/option-parsing-in-python-scripts/"/>
    <updated>2013-07-16T15:12:00+00:00</updated>
    <id>http://ephemeral.me/blog/2013/07/16/option-parsing-in-python-scripts</id>
    <content type="html"><![CDATA[<p>Just wrote a command-line python script and want to spread the happiness to
others by passing it on? If your last hurdle to this is adding ability to take
command line options like those (cool) shell scripts, here is your solution.</p>

<!-- more -->


<p>Now while it is possible to parse the arguments by taking the arguments as
string by doing this,:</p>

<p>``` python Arguments using sys.argv
import sys
arguments = sys.argv</p>

<h1><scriptname> hello -o filename</h1>

<h1>will give sys.argv = [scriptname hello -o filename]</h1>

<p>```</p>

<p>the approach is tedious and you will end up more time accounting for various
permutations and combinations.</p>

<h2>./introduce.py <code>--</code>module optprase</h2>

<p>Python is definitely a nicer world, and there is <code>optparse</code> to your rescue.</p>

<p><strong>NOTE</strong>: <a href="http://docs.python.org/2/library/optparse.html"><code>optparse</code></a> is only until python 2.7, in python >3.0, there is
<a href="http://docs.python.org/dev/library/argparse.html"><code>argparse</code></a>.</p>

<p>``` python argparse example
import optparse</p>

<h1>argparse in python >3.0, visit http://docs.python.org/dev/library/argparse.html</h1>

<p>parser = optparse.OptionParser()
parser.add_option("-f", "--file",               #the long and short option</p>

<pre><code>                dest="filename",            #name in the options dict
                help="write report to FILE",#help text for --help
                metavar="FILE")             #notice the help text.
</code></pre>

<p>parser.add_option("-q", "--quiet",              #again, option names</p>

<pre><code>                dest="verbose",             #name in options dict
                action="store_false",       #special way to say, store False
                default="true",             #default value
                help="dont print the status messages")
</code></pre>

<p>(options, args) = parser.parse_args()           #notice, returned list is unpacked
print options, args                             #refer the output in the next section
#</p>

<h1>./<scriptname> -f filename -q other-arguments</h1>

<h1>./<scriptname> -qf filename other-arguments</h1>

<h1>./<scriptname> -q -ffilename other-arguments</h1>

<h1>./<scriptname> --quiet --file filename other-arguments</h1>

<h1>all these will give an output</h1>

<h1>options                                  args</h1>

<h1>{'verbose': False, 'filename': 'myfile'} [other-arguments, ]</h1>

<p>```</p>

<p>Before I go any further, let me also show the output of this script.</p>

<p>``` bash argparse output
[pharos_user@pdevdv3os1dv ~]$ python optparser.py -qf myfile other-arguments
{'verbose': False, 'filename': 'myfile'} ['other-arguments']
[pharos_user@pdevdv3os1dv ~]$ python optparser.py --help
usage: optparser.py [options]</p>

<p>options:
-h, --help            show this help message and exit
-f FILE, --file=FILE  write report to FILE
-q, --quiet           dont print the status messages
```</p>

<p>It's apparent that:</p>

<ul>
<li>A <code>--help</code> or <code>-h</code> option is, rather conveniently, automatically added, which
prints traditionally styled help text.</li>
<li><code>help</code> option to <code>parser.add_option</code> provides the help text of each option for the automatically
produced <code>--help</code> usage.</li>
<li><code>dest</code> is the variable name in which the option data is stored in the
<code>options</code> dictionary.</li>
<li><code>action</code> tells that IF the option is given, then store <code>False</code> in the variable
provided by <code>dest</code>.</li>
<li><code>default</code>, no surprise here, is the default value for the option.</li>
<li>Once we get all the options in the dictionary called options, the remaining
arguments are stored in <code>args</code>.</li>
</ul>


<h2>Footnotes</h2>

<h3>Return value unpacking in python</h3>

<p>Did you notice how we slickly wrote <code>(options, args) = parser.parse_args()</code>, and
two values went into <code>options</code> and <code>args</code> seperately?</p>

<p>Actually, the function is returning two values in a tuple. If we write a
function like this:</p>

<p>```python multiple return values
def foo():</p>

<pre><code>return 1, 2, 3
</code></pre>

<p>a, b, c = foo()</p>

<h1>a=1, b=2, c=3</h1>

<p>```</p>

<p>Got that? Now again, what if you don't want to store <code>a</code> and <code>b</code>, and just want to
take <code>c</code>?</p>

<p>``` python ignore some returns</p>

<h1>both these work:</h1>

<p><em>, </em>, c = foo() #ignore first two return values
c = foo()[2]</p>

<h1>which means even this works:</h1>

<p>b, c = foo()[1:] #awesome!
```</p>

<h3>Single letter and long options in shell</h3>

<p>When a command is called, there can be either a single letter option: <code>ls -a</code> or
a long form of the option <code>ls --all</code>.</p>

<ul>
<li>Shorter options can be combined together:
<code>ls -lah</code> also means <code>ls -l -a -h</code>.</li>
<li>Option with arguments also can be mixed with
options without: <code>script -qf filename</code> is same as <code>script -q -f filename</code>.</li>
<li>Also, notice how single letter option with argument can be written as <code>script
-ffilename</code> without a space between argument and option.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Screencasting in Ubuntu - Ultimate Solution]]></title>
    <link href="http://ephemeral.me/blog/2013/05/07/screencasting-in-ubuntu-ultimate-solution/"/>
    <updated>2013-05-07T04:00:00+00:00</updated>
    <id>http://ephemeral.me/blog/2013/05/07/screencasting-in-ubuntu-ultimate-solution</id>
    <content type="html"><![CDATA[<p>While doing a couple of screencasts that we had to do as a part of our course, I
went through the process of learning how to create a screencast with just the
basic <a href="http://www.ffmpeg.org/">ffmpeg</a> tool. After facing a couple of hurdles and several iterations of
juggling with settings later, I finally came up with the right recipe: It works
smooth as a charm.</p>

<!-- more -->


<p>Without further ado, here is the final combo that worked:</p>

<p>``` bash Screencasting recipe</p>

<pre><code>ffmpeg -f alsa -ac 2 -i pulse -acodec alac -ab 128k -f x11grab 
-s `xdpyinfo | grep 'dimensions:'|awk '{print $2}'` -r 25 -i :0.0 -sameq
final.mkv
</code></pre>

<p>```</p>

<p>Here, <code>ffmpeg</code> is the tool that comes with the linux toolkit - it's used for
recording/transcoding video. This can do almost everything you want it to do in
terms of video/audio encoding/transcoding/cropping/merging or whatever.</p>

<p>The options:</p>

<ul>
<li><p><code>-f alsa</code> means use format <a href="https://wiki.archlinux.org/index.php/Advanced_Linux_Sound_Architecture"><code>alsa</code></a>. It's an audio format, and when you
mention an audio format, <code>ffmpeg</code> knows that it should use the format for the
audio channel.</p></li>
<li><p><code>-ac 2</code> tells <code>ffmpeg</code> to record 2 channels of audio with the video.</p></li>
<li><p><code>-i pulse</code> - mind you, many tutorials out there suggest you to use <code>-i hw:0,0</code>
or something similar. This did not work great for me, in fact, it worked much
worse. Audio was crackling, video lagged and slowly audio and video lost sync
along with time.</p></li>
<li><p><code>-acodec alac</code> asks <code>ffmpeg</code> to use a particular codec, and it worked well.</p></li>
<li><code>-ab 128k</code> asks <code>ffmpeg</code> to use 128kbit/s audio bitrate. This is good enough
for most applications.</li>
<li><code>-f x11grab</code> is the next format we are going to use - it's the screengrabbing
format.</li>
<li><code>-s `xdpyinfo | grep 'dimensions:'|awk '{print #2}'`</code> - this piece of code
here actually fetches your screen size! It gives the screen width and height
as input to the <code>-s</code> option, as the size of the screen to be captured.</li>
<li><code>-r 25</code> denotes the frame rate. 25 should usually work, unless your screen has
a specific application running in a particular framerate and you need to
capture it in that particular framerate. You could actually experiment around
it to get good results.</li>
<li><code>-i :0.0</code> asks <code>ffmpeg</code> to take video input from the <a href="http://www.x.org/archive/X11R6.8.1/doc/X.7.html">:0.0</a> - that's
the first screen connected to the computer.</li>
<li><code>-sameq</code> modifier tells ffmpeg to keep the same quality as input - that's
kinda making the solution easier.</li>
</ul>


<h3>Important things to keep in mind during a screencast:</h3>

<ul>
<li><p>Never use the laptop keyboard if your recording rig is a laptop - the laptop
key clicks get recorded in the mic. Apparently <a href="noiseremoval">Thinkpad is bringing a new
solution</a> for this problem.</p></li>
<li><p>Sit in a place without much wind directly hitting your mic. Clean the mic and
the hole where it's hosted - helps improve the sound.</p></li>
<li><p>You could use vlc/smplayer and open up a window with webcam on the screen, so
you could have yourself on the screencasting. Here's how to do it for
smplayer:</p></li>
</ul>


<p><code>bash Showing webcam in mplayer
  mplayer -tv driver=v4l2:gain=1:width=640:height=480:device=/dev/video0:fps=10:outfmt=rgb16 tv://
</code></p>

<ul>
<li>Alright, after you record in the aforementioned way, you might want to convert
the mkv to avi or some other lighter format - actually the bitrate is quite
for the video because of the <code>-sameq</code> modifier. If you actually mention a
lower bitrate for the video part, the size may decrease. I got 190MB for a 15
minute video.</li>
</ul>


<p>Happy Screencasting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to configure an SSL site in Ubuntu?]]></title>
    <link href="http://ephemeral.me/blog/2013/02/13/how-to-configure-a-ssl-site-in-ubuntu/"/>
    <updated>2013-02-13T15:48:00+00:00</updated>
    <id>http://ephemeral.me/blog/2013/02/13/how-to-configure-a-ssl-site-in-ubuntu</id>
    <content type="html"><![CDATA[<p>A part of my Software Engineering project is this (specially :P) assigned task
of reverse engineering a website for my department. This site for
<a href="dasanit.org">DASA</a> applicants is a <code>https</code> site, obviously, and I had to
install this locally. Well, this just happens to be my first journey into the
world of php. I got the site from the maintainer, who is pretty new to the role
too. Now there were two folders, one which had all the files of the site,
another with the database dump.</p>

<!-- more -->


<p>Here is what to do when you are in a situation like this - create a new site
using HTTPS or something.</p>

<p>First, let's start with installing the L(inux)A(pache)M(ysql)P(hp/ython) stack
in your Ubuntu machine. There is an excellent method to do this:</p>

<p>``` bash Installing the lamp stack</p>

<p>sudo apt-get install tasksel
sudo tasksel</p>

<p>```</p>

<p>Now select the LAMP stack option (usually the 4th). Press enter and you are
done with installing the LAMP stack. Visit <code>localhost</code> with your browser to
confirm - you should see something other than the usual boring error message
'page not found'</p>

<p>Now you have to configure the site.</p>

<p>``` bash Configuring a new site in Apache2</p>

<h1>change to the /var/www directory</h1>

<p>cd /var/www</p>

<h1>change permissions - otherwise you will have to struggle later.</h1>

<h1>do this if this is your own computer. Otherwise change permissions of</h1>

<h1>individual directories as you go ahead.</h1>

<p>sudo chown -R username:username /var/www</p>

<h1>This step is dangerous on someone else's computer too - but on your own</h1>

<h1>personal machine, chill!</h1>

<p>sudo chmod +rwx -R /var/www</p>

<p>mkdir /var/www/dasa</p>

<h1>now it's time to create the ssl:</h1>

<h1>when you visit with your browser to https://localhost, we should get the same</h1>

<h1>page as you got previously, after following the steps below.</h1>

<p>sudo a2enmod ssl</p>

<h1>use the default ssl site configuration to create one of your own:</h1>

<p>sudo cd /etc/apache2/sites-available/
sudo cp default-ssl ssl
sudo gedit ssl
```</p>

<p>Now edit the file and change the line in the top from <code>&lt;VirtualHost _default_:443&gt;</code>
to <code>&lt;VirtualHost *:443&gt;</code> and save the file.</p>

<p>``` bash Save and restart.
sudo a2ensite ssl
sudo service apache2 restart</p>

<h1>That's pretty straightforward!</h1>

<h1>Now I can visit <code>https://localhost</code></h1>

<p>```</p>

<p>Now all I had to do was copy the files from the folder given to me into the
<code>/var/www/dasa</code> folder. I did and voila! It was working.</p>

<h3>Footnote:</h3>

<p>Whenever you copy some files into the /var/www, you have to enable <code>+rwx</code> using
the command above. Instead, you could just add a folder mask to this folder so
whatever files you copy will get suitable permissions:</p>

<p><code>umask 0000</code></p>

<p>That will make sure all the files that come into the directory will not lose
any permissions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to reinstall a package using aptitude in Ubuntu?]]></title>
    <link href="http://ephemeral.me/blog/2013/02/13/how-to-reinstall-a-package-using-aptitude-in-ubuntu/"/>
    <updated>2013-02-13T13:14:00+00:00</updated>
    <id>http://ephemeral.me/blog/2013/02/13/how-to-reinstall-a-package-using-aptitude-in-ubuntu</id>
    <content type="html"><![CDATA[<p>So I was installing OpenCV - compiling it from source, infact. It needs <code>libgobject2.0-0.so</code>
which it couldn't find - I don't know why. And this problem was hardly faced by anyone
else which means it has to be because it's a pretty common library and I'd lost
it due to my usual fiddling around.</p>

<p><strong>TLDR;</strong> The package had to be reinstalled.</p>

<!-- more -->


<p>How? Haha. Sounds easy? Can't uninstall and reinstall - a package manager doesn't
allow you to uninstall a package if it is depended upon by other packages. So
what way is there to reinstall?</p>

<p>RTFM.</p>

<p><code>sudo apt-get install libglib2 --reinstall</code>.</p>

<p>That's it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Step 1 of HCI-MP: Installing OpenGL + OpenCV]]></title>
    <link href="http://ephemeral.me/blog/2013/02/13/step-1-of-hci-mp-installing-opengl-plus-opencv/"/>
    <updated>2013-02-13T02:14:00+00:00</updated>
    <id>http://ephemeral.me/blog/2013/02/13/step-1-of-hci-mp-installing-opengl-plus-opencv</id>
    <content type="html"><![CDATA[<p>I need to install OpenCV and OpenGL to work together for my project. So here are the
notes I took while installing OpenGL and OpenCV:</p>

<p><code>bash Installing OpenGL http://singhgurjot.wordpress.com/2012/05/17/how-to-install-openglglut-libraries-in-ubuntu-12-04/ From here:
sudo apt-get install freeglut3 freeglut3-dev
sudo apt-get install binutils-gold
</code></p>

<!-- more -->


<p>Installing OpenCV, on the other hand, is a tedious task. Here is the procedure
in a nutshell:</p>

<p>``` bash Installing OpenCV http://www.samontab.com/web/2012/06/installing-opencv-2-4-1-ubuntu-12-04-lts/ From excellent guide here:
sudo apt-get update
sudo apt-get upgrade</p>

<p>sudo apt-get install build-essential libgtk2.0-dev libjpeg-dev libtiff4-dev libjasper-dev libopenexr-dev cmake python-dev python-numpy python-tk libtbb-dev libeigen2-dev yasm libfaac-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev libqt4-dev libqt4-opengl-dev sphinx-common texlive-latex-extra libv4l-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev</p>

<p>cd ~
wget http://downloads.sourceforge.net/project/opencvlibrary/opencv-unix/2.4.1/OpenCV-2.4.1.tar.bz2
tar -xvf OpenCV-2.4.1.tar.bz2
cd OpenCV-2.4.1</p>

<p>mkdir build
cd build
cmake -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D BUILD_EXAMPLES=ON -D WITH_QT=ON -D WITH_OPENGL=ON ..</p>

<p>```</p>

<p>Now we gotta check in the generated output if Python, OpenGL supports are ticked. Qt
can also be checked for, but I didn't want it, so I ignored that part.</p>

<p>If OpenGL is not ticked, that's because you need to install GTK+ Extensions for OpenGL, which you can do by:</p>

<p>``` bash GTK+ Extensions for OpenGL http://stackoverflow.com/questions/11035500/trying-to-build-opencv-2-4-1-with-opengl-support SO Question here:</p>

<p>sudo apt-get install libgtkglext1 libgtkglext1-dev</p>

<p>```</p>

<p>Once we are done, we are all set to install OpenCV:</p>

<p>``` bash Installing OpenCV http://www.samontab.com/web/2012/06/installing-opencv-2-4-1-ubuntu-12-04-lts/ From excellent guide here:</p>

<p>make
sudo make install</p>

<p>```
You may need to log-out and log-in again. Now you have installed OpenCV and OpenGL.</p>
]]></content>
  </entry>
  
</feed>
